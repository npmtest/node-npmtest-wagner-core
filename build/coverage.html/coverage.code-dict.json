{"/home/travis/build/npmtest/node-npmtest-wagner-core/test.js":"/* istanbul instrument in package npmtest_wagner_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wagner-core/lib.npmtest_wagner_core.js":"/* istanbul instrument in package npmtest_wagner_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wagner_core = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wagner_core = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wagner-core/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wagner-core && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wagner_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wagner_core\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wagner_core.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wagner_core.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wagner_core.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wagner_core.__dirname + '/lib.npmtest_wagner_core.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wagner-core/node_modules/wagner-core/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-wagner-core/node_modules/wagner-core/lib/index.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar getParameterNames = require('get-parameter-names');\nvar _ = require('underscore');\nvar Safe = require('./safe');\nvar topologicalSort = require('./topologicalSort');\n\nvar modules = {};\n\nvar wagner = function(name, dependencies) {\n  return wagner.module(name, dependencies);\n};\n\nwagner.module = function(name, dependencies) {\n  modules[name] = wagnerFactory(name);\n  if (dependencies && dependencies.length) {\n    for (var i = 0; i < dependencies.length; ++i) {\n      var module = modules[dependencies[i]];\n      modules[name]._addTasks(module._getTasks());\n    }\n  }\n\n  return modules[name];\n};\n\nvar toParallelError = function(errors) {\n  if (!errors) {\n    return;\n  }\n\n  var msg = 'Errors in .parallel(): ';\n  _.each(errors, function(err) {\n    msg += err + ',';\n  });\n  var err = new Error(msg.substr(0, msg.length - 1));\n  err.errors = errors;\n\n  return err;\n};\n\nfunction popCallback(arr) {\n  if (arr.length && arr[arr.length - 1] === 'callback') {\n    arr.hasCallback = true;\n    arr.pop();\n  }\n\n  return arr;\n}\n\nvar wagnerFactory = function(name) {\n  var tasks = {};\n  var serviceCache = {};\n\n  var wagner = {\n    name: name,\n    task: function(name, func) {\n      var paramNames = getParameterNames(func);\n      if (paramNames.length &&\n          paramNames[paramNames.length - 1] === 'callback') {\n        paramNames.pop();\n      }\n\n      tasks[name] = {\n        task: func,\n        name: name,\n        dep: paramNames\n      };\n\n      return wagner;\n    },\n    factory: function(name, func) {\n      tasks[name] = {\n        task: func,\n        name: name,\n        service: true,\n        dep: getParameterNames(func)\n      };\n\n      return wagner;\n    },\n    constant: function(name, val) {\n      tasks[name] = {\n        task: function() { return val; },\n        name: name,\n        service: true,\n        dep: []\n      };\n\n      return wagner;\n    },\n    _getTasks: function() {\n      return tasks;\n    },\n    _addTasks: function(newTasks) {\n      for (var key in newTasks) {\n        tasks[key] = newTasks[key];\n      }\n    },\n    clear: function() {\n      tasks = {};\n      serviceCache = {};\n    },\n    parallel: function(map, func, callback) {\n      var results = {};\n      var errors;\n      _.each(map, function(value, key) {\n        try {\n          func(\n            value,\n            key,\n            function(error, result) {\n              if (error) {\n                results[key] = undefined;\n                errors = errors || {};\n                errors[key] = error;\n              } else {\n                results[key] = result;\n              }\n              if (Object.keys(results).length === Object.keys(map).length) {\n                return callback(toParallelError(errors), results);\n              }\n            });\n        } catch (error) {\n          results[key] = undefined;\n          errors = errors || {};\n          errors[key] = error;\n\n          if (Object.keys(results).length === Object.keys(map).length) {\n            return callback(toParallelError(errors), results);\n          }\n        }\n      });\n    },\n    series: function(arr, func, callback) {\n      var results = [];\n\n      var next = function(index) {\n        if (index >= arr.length) {\n          return callback(null, results);\n        }\n\n        try {\n          func(arr[index], index, function(error, result) {\n            if (error) {\n              return callback({ index: index, error: error });\n            }\n\n            results.push(result);\n            next(index + 1);\n          });\n        } catch (error) {\n          return callback({ index: index, error: error });\n        }\n      };\n\n      next(0);\n    },\n    invoke: function(func, locals) {\n      var paramNames = func.$inject || getParameterNames(func);\n\n      // Remove error param\n      var hasErrorParameter = paramNames.length &&\n        ['error', 'err'].indexOf(paramNames[0]) != -1;\n      if (hasErrorParameter) {\n        paramNames.shift();\n      }\n\n      var newTasks = _.clone(tasks);\n      _.each(locals, function(value, key) {\n        newTasks[key] = {\n          name: key,\n          dep: [],\n          value: value\n        };\n      });\n\n      var orderedTasks = topologicalSort(newTasks, paramNames);\n      orderedTasks = _.map(orderedTasks, function(taskName) {\n        return newTasks[taskName];\n      });\n\n      var alreadyExecuted = {};\n      _.each(locals, function(value, key) {\n        alreadyExecuted[key] = { value: value, done: true };\n      });\n\n      _.each(serviceCache, function(value, key) {\n        alreadyExecuted[key] = value;\n      });\n\n      for (var i = 0; i < orderedTasks.length; ++i) {\n        if (!orderedTasks[i].isSync) {\n          throw 'Called invoke() with async dependency ' + orderedTasks[i].name;\n        }\n      }\n\n      var sorted = topologicalSort(newTasks, _.pluck(orderedTasks, 'name'));\n\n      for (var i = 0; i < sorted.length; ++i) {\n        var task = newTasks[sorted[i]];\n        if (task.value) {\n          alreadyExecuted[task.name] = { value: task.value, done: true };\n        } else if (alreadyExecuted[task.name]) {\n          continue;\n        } else {\n          var params = getParameterNames(task.task);\n          var args = [];\n          for (var j = 0; j < params.length; ++j) {\n            args.push(alreadyExecuted[params[j]].value);\n          }\n          alreadyExecuted[task.name] = {\n            value: task.task.apply(null, args),\n            done: true\n          };\n          if (task.service) {\n            serviceCache[task.name] = alreadyExecuted[task.name];\n          }\n        }\n      }\n\n      var args = [];\n      if (hasErrorParameter) {\n        args.push(null);\n      }\n      for (var i = 0; i < paramNames.length; ++i) {\n        args.push(alreadyExecuted[paramNames[i]].value);\n      }\n      return func.apply(null, args);\n    },\n    invokeAsync: function(func, locals) {\n      var emitter = new EventEmitter();\n      var paramNames = getParameterNames(func);\n\n      // Remove error param\n      var hasErrorParameter = paramNames.length &&\n        ['error', 'err'].indexOf(paramNames[0]) != -1;\n      if (hasErrorParameter) {\n        paramNames.shift();\n      }\n\n      var newTasks = _.clone(tasks);\n      _.each(locals, function(value, key) {\n        newTasks[key] = {\n          name: key,\n          dep: [],\n          value: value\n        };\n      });\n\n      var orderedTasks = topologicalSort(newTasks, paramNames);\n      orderedTasks = _.map(orderedTasks, function(taskName) {\n        return newTasks[taskName];\n      });\n\n      var alreadyExecuted = {};\n      _.each(locals, function(value, key) {\n        alreadyExecuted[key] = { value: value, done: true };\n      });\n\n      _.each(serviceCache, function(value, key) {\n        alreadyExecuted[key] = value;\n      });\n\n      step(emitter, {}, serviceCache, alreadyExecuted, orderedTasks, function(error) {\n        if (error) {\n          if (hasErrorParameter) {\n            var args = [error];\n            for (var i = 0; i < paramNames.length; ++i) {\n              var v = alreadyExecuted[paramNames[i]] ?\n                alreadyExecuted[paramNames[i]].value :\n                undefined;\n              args.push(v);\n            }\n            return func.apply(null, args);\n          } else {\n            return emitter.emit('error', error);\n          }\n        }\n\n        var args = [];\n        if (hasErrorParameter) {\n          args.push(null);\n        }\n        for (var i = 0; i < paramNames.length; ++i) {\n          args.push(alreadyExecuted[paramNames[i]].value);\n        }\n\n        func.apply(null, args);\n      });\n\n      return emitter;\n    },\n    safe: function() {\n      return new Safe();\n    },\n    get: function(name) {\n      var fn = function(v) { return v; };\n      fn.$inject = [name];\n      return wagner.invoke(fn);\n    }\n  };\n\n  return wagner;\n};\n\nvar instance = wagnerFactory('global');\n_.each(instance, function(value, key) {\n  if (typeof value === 'function') {\n    wagner[key] = function() {\n      return instance[key].apply(instance, arguments);\n    };\n  }\n});\n\nmodule.exports = wagner;\n\nfunction step(emitter, state, serviceCache, alreadyExecuted, tasks, callback) {\n  if (state.done || _stepCheckDone(alreadyExecuted, tasks, callback)) {\n    state.done = true;\n    return;\n  }\n\n  _.each(tasks, function(task) {\n    if (alreadyExecuted[task.name]) {\n      return;\n    }\n\n    var paramNames = popCallback(getParameterNames(task.task));\n    var ready = true;\n    var args = [];\n    for (var i = 0; i < paramNames.length; ++i) {\n      if (!alreadyExecuted[paramNames[i]] ||\n          !alreadyExecuted[paramNames[i]].done) {\n        ready = false;\n        break;\n      }\n      args.push(alreadyExecuted[paramNames[i]].value);\n    }\n\n    if (ready) {\n      alreadyExecuted[task.name] = { executing: true };\n\n      if (paramNames.hasCallback) {\n        args.push(function(error, value) {\n          emitter.emit(task.name + ':end');\n          if (state.done) {\n            return;\n          }\n\n          if (error) {\n            state.done = true;\n            return process.nextTick(function() {\n              callback(error);\n            });\n          }\n          alreadyExecuted[task.name] = { value: value, done: true };\n          if (task.service) {\n            serviceCache[task.name] = alreadyExecuted[task.name];\n          }\n\n          step(emitter, state, serviceCache, alreadyExecuted, tasks, callback);\n        });\n\n        try {\n          emitter.emit(task.name + ':start');\n          task.task.apply(null, args);\n        } catch (error) {\n          state.done = true;\n          return callback(error);\n        }\n      } else {\n        try {\n          emitter.emit(task.name + ':start');\n          alreadyExecuted[task.name] = {\n            value: task.task.apply(null, args),\n            done: true\n          };\n          emitter.emit(task.name + ':end');\n          if (task.service) {\n            serviceCache[task.name] = alreadyExecuted[task.name];\n          }\n        } catch (error) {\n          // Can't be in state.done here because in same iteration of event\n          // loop as a call to _stepCheckDone()\n          state.done = true;\n          process.nextTick(function() {\n            return callback(error);\n          });\n          return;\n        }\n\n        process.nextTick(function() {\n          step(emitter, state, serviceCache, alreadyExecuted, tasks, callback);\n        });\n      }\n    }\n  });\n};\n\nfunction _stepCheckDone(alreadyExecuted, tasks, callback) {\n  var numDone = 0;\n  for (var key in alreadyExecuted) {\n    if (alreadyExecuted[key].done) {\n      ++numDone;\n    }\n  }\n\n  if (numDone === Object.keys(tasks).length) {\n    process.nextTick(function() {\n      return callback(null);\n    });\n    return true;\n  }\n\n  return false;\n}\n","/home/travis/build/npmtest/node-npmtest-wagner-core/node_modules/wagner-core/lib/safe.js":"var EventEmitter = require('events').EventEmitter;\n\nmodule.exports = Safe;\n\nfunction Safe() {\n  this._emitter = new EventEmitter();\n}\n\nSafe.prototype.try = function(fn) {\n  var _this = this;\n  return function(error) {\n    if (error) {\n      return _this._emitter.emit('error', error);\n    }\n\n    try {\n      fn.apply(_this, arguments);\n    } catch(err) {\n      _this._emitter.emit('error', err);\n    }\n  };\n};\n\nSafe.prototype.stream = function(stream) {\n  var _this = this;\n  stream.on('error', function(error) {\n    _this.emit('error', error);\n    stream.destroy();\n  });\n};\n\n// Event emitter interface\nSafe.prototype.emit = function() {\n  this._emitter.emit.apply(this._emitter, arguments);\n};\n\nSafe.prototype.once = function() {\n  this._emitter.once.apply(this._emitter, arguments);\n};\n\nSafe.prototype.on = function() {\n  this._emitter.on.apply(this._emitter, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-wagner-core/node_modules/wagner-core/lib/topologicalSort.js":"'use strict';\n\nvar getParameterNames = require('get-parameter-names');\nvar _ = require('underscore');\n\nmodule.exports = function(tasks, taskNames) {\n  var sync = {};\n  var async = {};\n\n  _.each(taskNames, function(taskName) {\n    var result = dfs(tasks, taskName, {});\n\n    for (var i = 0; i < result.length; ++i) {\n      if (tasks[result[i]].isSync) {\n        sync[result[i]] = 1;\n      } else {\n        async[result[i]] = 1;\n      }\n    }\n  });\n\n  return Object.keys(sync).concat(Object.keys(async));\n};\n\nfunction dfs(tasks, taskName, alreadyVisited, stack) {\n  var task = tasks[taskName];\n  var result = [];\n\n  stack = stack || [];\n  alreadyVisited[taskName] = true;\n  if (!task) {\n    var errmsg = 'No such dependency: ' + taskName + ' <- ' +\n      stack.join(' <- ');\n    throw new Error(errmsg);\n  }\n\n  if (task.task) {\n    var params = getParameterNames(task.task);\n    // A task is not synchronous if it takes a callback\n    task.isSync = params.indexOf('callback') === -1 &&\n      params.indexOf('cb') === -1;\n  } else {\n    task.isSync = true;\n  }\n\n  for (var i = 0; i < task.dep.length; ++i) {\n    var dependency = tasks[task.dep[i]];\n\n    if (alreadyVisited[task.dep[i]]) {\n      var errmsg = 'Cycle detected: ' + task.dep[i] + ' <- ' + task.name +\n        ' <- ' + stack.join(' <- ');\n      throw new Error(errmsg);\n    }\n\n    var res = dfs(tasks, task.dep[i], alreadyVisited, stack.concat(taskName));\n    result = result.concat(res);\n\n    // A task is async if it depends on an async task\n    if (task.isSync && !dependency.isSync) {\n      var errmsg = 'Sync dependency ' + taskName +\n        ' depends on async dependency ' + task.dep[i];\n      throw new Error(errmsg);\n    }\n  }\n\n  // Treat alreadyVisited as a stack\n  delete alreadyVisited[taskName];\n  result.push(taskName);\n  return result;\n}\n"}